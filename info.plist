<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.dannyfeliz.capla</string>
	<key>category</key>
	<string>Productivity</string>
	<key>connections</key>
	<dict>
		<key>3C9D83C4-CA6C-4EF6-9EF0-6A511ACC866C</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>clipboard-action</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Danny Feliz</string>
	<key>description</key>
	<string>Alfred workflow that converts USD to Dominican Pesos (DOP) using real-time exchange rates from Capla.</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Capla</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>capla</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading</string>
				<key>script</key>
				<string>./node_modules/alfy/run-node.sh index.js "$1"</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>Capla Currency Converter</string>
				<key>type</key>
				<integer>5</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>3C9D83C4-CA6C-4EF6-9EF0-6A511ACC866C</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>autopaste</key>
				<false/>
				<key>clipboardtext</key>
				<string>{query}</string>
				<key>ignoredynamicplaceholders</key>
				<false/>
				<key>transient</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.clipboard</string>
			<key>uid</key>
			<string>clipboard-action</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
	</array>
	<key>readme</key>
	<string># Capla Currency Converter


Alfred workflow that converts USD to Dominican Pesos (DOP) using real-time exchange rates from [Capla](https://accapla.com).


## Installation

**Requirements:** Node.js and npm installed on your system

1. **Download the workflow file:** [Capla.alfredworkflow](https://github.com/DannyFeliz/capla-alfted/blob/main/Capla.alfredworkflow)
2. **Double-click** the file to install it in Alfred
3. **Set permissions** if prompted (Alfred may ask for accessibility permissions)

**Alternative:** Clone this repository and import manually:
git clone https://github.com/dannyfeliz/capla-currency-converter.git
cd capla-currency-converter
npm install
# Open Alfred Preferences &gt; Workflows &gt; Import
# Select the workflow folder


## Usage

**Basic conversion:**
capla 250

**Compare with bank rate:**
capla 1,000 63.25

## Features

- üí± Real-time exchange rates from accapla.com
- üè¶ Bank rate comparison
- üí∞ Automatic fee calculation ($5 fixed + 0.15% tax)
- üìä Shows gain/loss vs bank rates
- üî¢ Comma-formatted input support

## Development

**Test commands:**
npm test              # Run tests in watch mode
npm run test:run      # Run tests once
npm run test:coverage # Run with coverage report


**Linting commands:**
npm run lint          # Check code quality with oxlint
npm run lint:fix      # Fix auto-fixable linting issues


**Adding features:**
1. Write tests in `index.test.js`
2. Implement in `index.js`
3. Export functions for testing
4. Run linting and tests

## Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details on:
- Setting up the development environment
- Code style guidelines
- Testing requirements
- Submitting pull requests

## Dependencies

- **alfy** - Alfred workflow helper
- **node-html-parser** - HTML parsing
- **vitest** - Testing framework
- **oxlint** - Fast linter (dev dependency)

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.</string>
	<key>uidata</key>
	<dict>
		<key>3C9D83C4-CA6C-4EF6-9EF0-6A511ACC866C</key>
		<dict>
			<key>xpos</key>
			<real>180</real>
			<key>ypos</key>
			<real>80</real>
		</dict>
		<key>clipboard-action</key>
		<dict>
			<key>xpos</key>
			<real>380</real>
			<key>ypos</key>
			<real>80</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array/>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>2</string>
	<key>webaddress</key>
	<string>capla.dannyfeliz.com</string>
</dict>
</plist>
